max = max(trainset$Oldpeak),
value = (min(trainset$Oldpeak) + max(trainset$Oldpeak))/2),
selectInput("ST_Slope", label = "ST_Slope:",
choices = list("Upslope" = "Up", "FlatSlope" = "Flat", "DownSlope" = "Down"),
selected = "Upslope"),
actionButton("submitbutton", "Submit", class = "btn btn-primary")
),
mainPanel(
tags$label(h3('Status/Output')), # Status/Output Text Box
verbatimTextOutput('contents'),
tableOutput('tabledata') # Prediction results table
)
)
####################################
#               Server             #
####################################
server <- function(input, output, session) {
# Input Data
datasetInput <- reactive({
# age, sex, chestpaintype, restingbp, cholesterol, fastingbs,restingecg,maxhr,exerciseangina,oldpeak,st_slope
df <- data.frame(
Name = c("Age",
"Sex",
"ChestPainType",
"RestingBP",
"Cholesterol",
"FastingBS",
"RestingECG",
"MaxHR",
"ExerciseAngina",
"Oldpeak",
"ST_Slope"),
Value = as.character(c(Age = input$Age,
Sex = input$Sex,
ChestPainType = input$ChestPainType,
RestingBP = input$RestingBP,
Cholesterol = input$Cholesterol,
FastingBS = input$FastingBS,
RestingECG = input$RestingECG,
MaxHR = input$MaxHR,
ExerciseAngina = input$ExerciseAngina,
Oldpeak = input$Oldpeak,
ST_Slope = input$ST_Slope)),
stringsAsFactors = FALSE)
heartDisease <- "HeartDisease"
df <- rbind(df, heartDisease)
input <- transpose(df)
write.table(input,"input.csv", sep=",", quote = FALSE, row.names = FALSE, col.names = FALSE)
test <- read.csv(paste("input", ".csv", sep=""), header = TRUE)
# test$outlook <- factor(test$outlook, levels = c("overcast", "rainy", "sunny"))
#
test$Sex = factor(test$Sex)
test$ChestPainType = factor(test$ChestPainType)
test$FastingBS = factor(test$FastingBS)
test$RestingECG = factor(test$RestingECG)
test$ST_Slope = factor(test$ST_Slope)
test$ExerciseAngina = factor(test$ExerciseAngina)
class(test$Age)
Output <- data.frame(Prediction=predict(m1,test), round(predict(m1,test,type="prob"), 3))
print(Output)
})
# Status/Output Text Box
output$contents <- renderPrint({
if (input$submitbutton>0) {
isolate("Calculation complete.")
} else {
return("Server is ready for calculation.")
}
})
# Prediction results table
output$tabledata <- renderTable({
if (input$submitbutton>0) {
isolate(datasetInput())
}
})
}
####################################
#        Create the shiny app      #
####################################
shinyApp(ui = ui, server = server)
runApp('C:/Users/Wei Kang/OneDrive - Nanyang Technological University/Year 2/Sem 1/BC2406 Analytics I/BC2406 Course Materials/Group Project/Codes/UI.R')
runApp('C:/Users/Wei Kang/OneDrive - Nanyang Technological University/Year 2/Sem 1/BC2406 Analytics I/BC2406 Course Materials/Group Project/Codes/UI.R')
test <- read.csv(paste("input", ".csv", sep=""), header = TRUE)
# test$outlook <- factor(test$outlook, levels = c("overcast", "rainy", "sunny"))
#
test$Sex = factor(test$Sex)
test$ChestPainType = factor(test$ChestPainType)
test$FastingBS = factor(test$FastingBS)
test$RestingECG = factor(test$RestingECG)
test$ST_Slope = factor(test$ST_Slope)
test$ExerciseAngina = factor(test$ExerciseAngina)
class(test$Age)
write.table(input,"input.csv", sep=",", quote = FALSE, row.names = FALSE, col.names = FALSE)
####################################
#        Create the shiny app      #
####################################
shinyApp(ui = ui, server = server)
test
test <- read.csv(paste("input", ".csv", sep=""), header = TRUE)
# test$outlook <- factor(test$outlook, levels = c("overcast", "rainy", "sunny"))
#
test$Sex = factor(test$Sex)
test$ChestPainType = factor(test$ChestPainType)
test$FastingBS = factor(test$FastingBS)
test$RestingECG = factor(test$RestingECG)
test$ST_Slope = factor(test$ST_Slope)
test$ExerciseAngina = factor(test$ExerciseAngina)
test
class(test$Age)
class(test$Sex)
test$Age = as.numeric(test$Age)
class(test$Age)
test$RestingBP = as.numeric(test$RestingBP)
test$Cholesterol = as.numeric(test$Cholesterol)
test$MaxHR = as.numeric(test$MaxHR)
test$Oldpeak = as.numeric(test$Oldpeak)
class(test$Age)
Output <- data.frame(Prediction=predict(m1,test), round(predict(m1,test,type="response"), 3))
print(Output)
class(test)
Output <- data.frame(Prediction=predict(m1,test), round(predict(m1,test,type="prob"), 3))
Output <- data.frame(Prediction=predict(m1,test, type = "link"), round(predict(m1,test,type="response"), 3))
print(Output)
is.na(test)
test$Age
runApp('TESTING.R')
runApp('C:/Users/Wei Kang/Downloads/rshiny_freecodecamp-main/rshiny_freecodecamp-main/4-iris-predictor/app-slider.R')
Output <- data.frame(Prediction=predict(model,test), round(predict(model,test,type="prob"), 3))
# Read in the RF model
model <- readRDS("model.rds")
Output <- data.frame(Prediction=predict(model,test), round(predict(model,test,type="prob"), 3))
test <- read.csv(paste("input", ".csv", sep=""), header = TRUE)
Output <- data.frame(Prediction=predict(model,test), round(predict(model,test,type="prob"), 3))
setwd("C:/Users/Wei Kang/Downloads/rshiny_freecodecamp-main/rshiny_freecodecamp-main/4-iris-predictor")
test <- read.csv(paste("input", ".csv", sep=""), header = TRUE)
test
Output <- data.frame(Prediction=predict(model,test), round(predict(model,test,type="prob"), 3))
summary(model)
# Read in the RF model
model <- readRDS("model.rds")
summary(model)
model
Output <- data.frame(Prediction=predict(model,test), round(predict(model,test,type="prob"), 3))
print(Output)
Output <- data.frame(Prediction=predict(model,test), round(predict(model,test,type="response"), 3))
print(Output)
Output <- data.frame(Prediction=predict(model,test))
print(Output)
test
test$Sepal.Length
print(Output)
runApp('app-slider.R')
runApp('app-slider.R')
library(markdown)
install.packages('tidyverse')
install.packages('medicaldata')
install.packages('shiny')
install.packages('mlbench')
install.packages("shiny")
library(tidyverse)
library(medicaldata)
library(shiny)
supra_linear_model <- medicaldata::supraclavicular %>%
lm(formula = onset_sensory ~ age + bmi + gender + group,
data = .)
saveRDS(supra_linear_model, "linear_model.RDS")
library(mlbench)
library(shiny)
data("PimaIndiansDiabetes2")
dm_logit_mod <- glm(diabetes ~ glucose + mass + pedigree + age,
data = PimaIndiansDiabetes2,
family = "binomial")
saveRDS(dm_logit_mod, "logit_model.RDS")
runApp('app-slider.R')
input_df <- reactive({
data.frame(bmi = 22,
age = 22e,
input_df <- reactive({
data.frame(bmi = 22,
age = 22,
group = as.double(1),
gender = as.double(0))
})
pred <- reactive({
predict(model, input_df())
})
pred
print(pred)
#---------------------------------------------Setting Working Directory------------------------------------------------------#
setwd("C:/Users/Wei Kang/OneDrive - Nanyang Technological University/Year 2/Sem 1/BC2406 Analytics I/BC2406 Course Materials/Group Project/Datasets")
input_df <- {
data.frame(bmi = 22,
age = 12,
group = as.double(1),
gender = as.double(0))
}
input_df
trainset <-fread("heart_failure_prediction_training.csv", stringsAsFactors = TRUE)
trainset<- trainset[,-1]
trainset$FastingBS <- factor(trainset$FastingBS)
trainset$HeartDisease <- factor(trainset$HeartDisease)
testset <-fread("heart_failure_prediction_test.csv", stringsAsFactors = TRUE)
testset <- testset[,-1]
testset$FastingBS <- factor(testset$FastingBS)
testset$HeartDisease <- factor(testset$HeartDisease)
m1 <- readRDS("model.rds")
threshold1 <-0.5
prob.test <- predict(m1, newdata = testset, type = 'response')
m1.predict.test <- ifelse(prob.test > threshold1, "1", "0")
table2 <- table(Testset.Actual = testset$HeartDisease, m1.predict.test, deparse.level = 2)
table2
cfm2 <- as_tibble(table2)
cfm2
plot_confusion_matrix(cfm2,
target_col = "Testset.Actual",
prediction_col = "m1.predict.test",
counts_col = "n",
place_x_axis_above = FALSE,
add_col_percentages = FALSE,
add_row_percentages = FALSE)
# Overall Accuracy
mean(m1.predict.test == testset$HeartDisease)
input_df <- data.frame(Age = as.numeric("22"),
Sex = as.factor("M"),
ChestPainType = as.factor("ASY"),
RestingBP = as.numeric$("150"),
input_df <- data.frame(Age = as.numeric("22"),
Sex = as.factor("M"),
ChestPainType = as.factor("ASY"),
RestingBP = as.numeric("150"),
Cholesterol = as.numeric("200"),
FastingBS = as.factor("1"),
RestingECG = as.factor("Normal"),
MaxHR = as.numeric("150"),
ExerciseAngina = as.factor("Y"),
Oldpeak = as.numeric("0"),
ST_Slope = as.factor("Up")
)
input_df
pred <- predict(model, input_df, type = "link")
pred <- predict(m1, input_df, type = "prob")
pred <- predict(m1, input_df, type = "link")
pred
class(pred)
pred <- data.table(predict(m1, input_df, type = "link"))
pred
pred <- data.table(Prediction = predict(m1, input_df, type = "link"))
pred
pred <- data.table(Prediction = predict(m1, input_df))
pred
pred <- data.table(Prediction = predict(m1, input_df, type = "link"))
pred
pred <- data.table(predict(m1, input_df, type = "link"))
pred
pred <- data.table(Prediction = c(predict(m1, input_df, type = "link")))
pred
predict(m1,input_df)
results = data.table(predict(m1,input_df))
results
results = table(predict(m1,input_df))
results
input_df
results = data.frame(predict(m1,input_df))
results
results$predict.m1..input_df.
results = data.frame(Prediction = predict(m1,input_df, type = "link"))
results$predict.m1..input_df.
results
results = data.frame(Prediction = predict(m1,input_df, type = "term") )
results
results = data.frame(Prediction = predict(m1,input_df, type = "response") )
results
results = data.frame(Prediction = predict(m1,input_df, type = "link") )
results
results = cbind(Prediction = predict(m1,input_df, type = "link") )
results
input_df$predictedClass = predict(m1,newdata = input_df, type = "link")
input_df
input_df <- data.frame(Age = as.numeric("68"),
Sex = as.factor("M"),
ChestPainType = as.factor("ASY"),
RestingBP = as.numeric("150"),
Cholesterol = as.numeric("200"),
FastingBS = as.factor("1"),
RestingECG = as.factor("Normal"),
MaxHR = as.numeric("150"),
ExerciseAngina = as.factor("Y"),
Oldpeak = as.numeric("0"),
ST_Slope = as.factor("Up")
)
input_df$predictedClass = predict(m1,newdata = input_df, type = "link")
input_df
threshold1 <-0.5
prob.test <- predict(m1, newdata = input_df, type = 'response')
m1.predict.test <- ifelse(prob.test > threshold1, "1", "0")
m1.predict.test
prob.test
m1.predict.test <- ifelse(prob.test > threshold1, "At risk of heart disease!", "Not at risk!")
m1.predict.test
prob.test
input_df$AtRisk = m1.predict.test
input_df
df <- data.frame(
Name = c("Age",
"Sex",
"ChestPainType",
"RestingBP",
"Cholesterol",
"FastingBS",
"RestingECG",
"MaxHR",
"ExerciseAngina",
"Oldpeak",
"ST_Slope"),
Value = as.character(c(Age = as.numeric("68"),
Sex = as.factor("M"),
ChestPainType = as.factor("ASY"),
RestingBP = as.numeric("150"),
Cholesterol = as.numeric("200"),
FastingBS = as.factor("1"),
RestingECG = as.factor("Normal"),
MaxHR = as.numeric("150"),
ExerciseAngina = as.factor("Y"),
Oldpeak = as.numeric("0"),
ST_Slope = as.factor("Up"))),
stringsAsFactors = FALSE)
df
pred <- input_df$AtRisk
pred
runApp('C:/Users/Wei Kang/OneDrive - Nanyang Technological University/Year 2/Sem 1/BC2406 Analytics I/BC2406 Course Materials/Group Project/Codes/UI.R')
runApp('C:/Users/Wei Kang/OneDrive - Nanyang Technological University/Year 2/Sem 1/BC2406 Analytics I/BC2406 Course Materials/Group Project/Codes/UI.R')
input_df
runApp('C:/Users/Wei Kang/OneDrive - Nanyang Technological University/Year 2/Sem 1/BC2406 Analytics I/BC2406 Course Materials/Group Project/Codes/UI.R')
prob.test <- predict(m1, newdata = input_df, type = 'response')
prob.test
runApp('C:/Users/Wei Kang/OneDrive - Nanyang Technological University/Year 2/Sem 1/BC2406 Analytics I/BC2406 Course Materials/Group Project/Codes/UI.R')
runApp('C:/Users/Wei Kang/OneDrive - Nanyang Technological University/Year 2/Sem 1/BC2406 Analytics I/BC2406 Course Materials/Group Project/Codes/UI.R')
runApp('C:/Users/Wei Kang/OneDrive - Nanyang Technological University/Year 2/Sem 1/BC2406 Analytics I/BC2406 Course Materials/Group Project/Codes/UI.R')
if (interactive()) {
shinyApp(
ui = basicPage(
textInput("txt", "Enter the text to display below:"),
textOutput("text"),
verbatimTextOutput("verb")
),
server = function(input, output) {
output$text <- renderText({ input$txt })
output$verb <- renderText({ input$txt })
}
)
}
print(input_df$AtRisk)
runApp('C:/Users/Wei Kang/OneDrive - Nanyang Technological University/Year 2/Sem 1/BC2406 Analytics I/BC2406 Course Materials/Group Project/Codes/UI.R')
getwd()
runApp('C:/Users/Wei Kang/OneDrive - Nanyang Technological University/Year 2/Sem 1/BC2406 Analytics I/BC2406 Course Materials/Group Project/Codes/UI.R')
input_df
runApp('C:/Users/Wei Kang/OneDrive - Nanyang Technological University/Year 2/Sem 1/BC2406 Analytics I/BC2406 Course Materials/Group Project/Codes/UI.R')
runApp('C:/Users/Wei Kang/OneDrive - Nanyang Technological University/Year 2/Sem 1/BC2406 Analytics I/BC2406 Course Materials/Group Project/Codes/UI.R')
runApp('C:/Users/Wei Kang/OneDrive - Nanyang Technological University/Year 2/Sem 1/BC2406 Analytics I/BC2406 Course Materials/Group Project/Codes/UI.R')
runApp('C:/Users/Wei Kang/OneDrive - Nanyang Technological University/Year 2/Sem 1/BC2406 Analytics I/BC2406 Course Materials/Group Project/Codes/UI.R')
library(shiny)
ui = fluidPage(
# this is an input object
titlePanel("Underwriting Prediction Model"),
sidebarLayout(position = "left",
sidebarPanel(
numericInput(inputId='age', label='Age', value = 18,min = NA, max = NA, step = NA,width = NULL),
checkboxGroupInput(inputId='gender', label='Gender', c('male','female'), selected = NULL, inline = FALSE,width = NULL),
numericInput(inputId='bmi', label='bmi', value = 18,min = NA, max = NA, step = NA,width = NULL),
numericInput(inputId='height', label='Height', value = 150,min = NA, max = NA, step = NA,width = NULL),
numericInput(inputId='weight', label='Weight', value = 25, min = NA, max = NA, step = NA,width = NULL),
numericInput(inputId='cholesterol', label='Cholesterol', value = 25, min = NA, max = NA, step = NA,width = NULL)
),
mainPanel(textOutput("Pred")))
)
server = function (input,output) {
data <- reactive({
req(input$gender)
data.frame(age=input$age,
gender=input$gender,
bmi=input$bmi,
height=input$height,
weight=input$weight,
cholesterol=input$cholesterol)
})
pred <- reactive({
predict(model,data())
})
output$Pred <- renderPrint(pred())
}
shinyApp(ui=ui,server=server)
pred
runApp('C:/Users/Wei Kang/OneDrive - Nanyang Technological University/Year 2/Sem 1/BC2406 Analytics I/BC2406 Course Materials/Group Project/Codes/UI.R')
Output
m1.predict.test
Output <- data.frame(Prediction=m1.predict.test)
Output
runApp('C:/Users/Wei Kang/OneDrive - Nanyang Technological University/Year 2/Sem 1/BC2406 Analytics I/BC2406 Course Materials/Group Project/Codes/UI.R')
runApp('C:/Users/Wei Kang/OneDrive - Nanyang Technological University/Year 2/Sem 1/BC2406 Analytics I/BC2406 Course Materials/Group Project/Codes/UI.R')
# prob.test = predict(m1, newdata = input_df, type = 'response')
# m1.predict.test <- ifelse(prob.test > threshold1, "At risk of heart disease!", "Not at risk!")
# # input_df$AtRisk = m1.predict.test
# Output <- data.frame(Prediction=m1.predict.test)
predict(m1,newdata=input_df, type='response')
m1 <- readRDS("model.rds")
threshold1 <-0.5
prob.test <- predict(m1, newdata = testset, type = 'response')
m1.predict.test <- ifelse(prob.test > threshold1, "1", "0")
table2 <- table(Testset.Actual = testset$HeartDisease, m1.predict.test, deparse.level = 2)
table2
cfm2 <- as_tibble(table2)
cfm2
plot_confusion_matrix(cfm2,
target_col = "Testset.Actual",
prediction_col = "m1.predict.test",
counts_col = "n",
place_x_axis_above = FALSE,
add_col_percentages = FALSE,
add_row_percentages = FALSE)
# Overall Accuracy
mean(m1.predict.test == testset$HeartDisease)
prob.test <- predict(m1, newdata = input_df, type = 'response')
class(prob.test)
data.frame(prob.test)
class(prob.test)
prob.test = data.frame(prob.test)
class(prob.test)
prob.test
runApp('C:/Users/Wei Kang/OneDrive - Nanyang Technological University/Year 2/Sem 1/BC2406 Analytics I/BC2406 Course Materials/Group Project/Codes/UI.R')
class(pred)
# prob.test = predict(m1, newdata = input_df, type = 'response')
# m1.predict.test <- ifelse(prob.test > threshold1, "At risk of heart disease!", "Not at risk!")
# # input_df$AtRisk = m1.predict.test
# Output <- data.frame(Prediction=m1.predict.test)
data.frame(predict(m1,newdata=input_df, type='response'))
class(pred)
data.frame(pred)
class(pred)
pred <- data.frame(pred)
class(pred)
pred
runApp('C:/Users/Wei Kang/OneDrive - Nanyang Technological University/Year 2/Sem 1/BC2406 Analytics I/BC2406 Course Materials/Group Project/Codes/UI.R')
print(pred)
runApp('C:/Users/Wei Kang/OneDrive - Nanyang Technological University/Year 2/Sem 1/BC2406 Analytics I/BC2406 Course Materials/Group Project/Codes/UI.R')
pred <- data.frame(pred)
pred <- data.frame(pred)
pred <- data.frame(pred)
pred
#---------------------------------------------Setting Working Directory------------------------------------------------------#
setwd("C:/Users/Wei Kang/OneDrive - Nanyang Technological University/Year 2/Sem 1/BC2406 Analytics I/BC2406 Course Materials/Group Project/Datasets")
write.csv(input_df,"input.csv", row.names = FALSE)
class(input_df)
input_df <- reactive({
data.frame(Age = as.numeric(input$Age),
Sex = as.factor(input$Sex),
ChestPainType = as.factor(input$ChestPainType),
RestingBP = as.numeric(input$RestingBP),
Cholesterol = as.numeric(input$Cholesterol),
FastingBS = as.factor(input$FastingBS),
RestingECG = as.factor(input$RestingECG),
MaxHR = as.numeric(input$MaxHR),
ExerciseAngina = as.factor(input$ExerciseAngina),
Oldpeak = as.numeric(input$Oldpeak),
ST_Slope = as.factor(input$ST_Slope)
)
})
class(input_df)
class(input_df())
# prob.test <- predict(m1, newdata = input_df, type = 'response')
# m1.predict.test <- ifelse(prob.test > threshold1, "At risk of heart disease!", "Not at risk!")
# input_df$AtRisk = m1.predict.test
pred <- reactive({
# prob.test = predict(m1, newdata = input_df, type = 'response')
# m1.predict.test <- ifelse(prob.test > threshold1, "At risk of heart disease!", "Not at risk!")
# # input_df$AtRisk = m1.predict.test
# Output <- data.frame(Prediction=m1.predict.test)
(predict(m1,newdata=input_df(), type='response'))
})
pred
pred()
runApp('C:/Users/Wei Kang/OneDrive - Nanyang Technological University/Year 2/Sem 1/BC2406 Analytics I/BC2406 Course Materials/Group Project/Codes/UI.R')
pred
runApp('C:/Users/Wei Kang/OneDrive - Nanyang Technological University/Year 2/Sem 1/BC2406 Analytics I/BC2406 Course Materials/Group Project/Codes/UI.R')
runApp('C:/Users/Wei Kang/OneDrive - Nanyang Technological University/Year 2/Sem 1/BC2406 Analytics I/BC2406 Course Materials/Group Project/Codes/UI.R')
runApp('C:/Users/Wei Kang/OneDrive - Nanyang Technological University/Year 2/Sem 1/BC2406 Analytics I/BC2406 Course Materials/Group Project/Codes/UI.R')
runApp('C:/Users/Wei Kang/OneDrive - Nanyang Technological University/Year 2/Sem 1/BC2406 Analytics I/BC2406 Course Materials/Group Project/Codes/UI.R')
runApp('C:/Users/Wei Kang/OneDrive - Nanyang Technological University/Year 2/Sem 1/BC2406 Analytics I/BC2406 Course Materials/Group Project/Codes/UI.R')
mean(m1.predict.test == testset$HeartDisease)
test_df <- data.frame(Age = as.numeric("20"),
Sex = as.factor("F"),
ChestPainType = as.factor("ASY"),
RestingBP = as.numeric("150"),
Cholesterol = as.numeric("200"),
FastingBS = as.factor("1"),
RestingECG = as.factor("Normal"),
MaxHR = as.numeric("150"),
ExerciseAngina = as.factor("Y"),
Oldpeak = as.numeric("0"),
ST_Slope = as.factor("Up")
)
threshold1 <-0.5
class(prob.test)
prob.test = data.frame(prob.test)
prob.test
prob.test <- predict(m1, newdata = test_df, type = 'response')
m1.predict.test <- ifelse(prob.test > threshold1, "At risk of heart disease!", "Not at risk!")
m1.predict.test
prob.test
runApp('C:/Users/Wei Kang/Downloads/rshiny_freecodecamp-main/rshiny_freecodecamp-main/3-play-golf')
runApp('C:/Users/Wei Kang/OneDrive - Nanyang Technological University/Year 2/Sem 1/BC2406 Analytics I/BC2406 Course Materials/Group Project/Codes/UI.R')
runApp('C:/Users/Wei Kang/OneDrive - Nanyang Technological University/Year 2/Sem 1/BC2406 Analytics I/BC2406 Course Materials/Group Project/Codes/UI.R')
runApp('C:/Users/Wei Kang/OneDrive - Nanyang Technological University/Year 2/Sem 1/BC2406 Analytics I/BC2406 Course Materials/Group Project/Codes/UI.R')
